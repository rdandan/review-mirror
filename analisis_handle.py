import json
import sys
sys.path.append("/mnt/access")
import numpy as np
import pandas as pd
# import itertools
from sklearn.feature_extraction.text import TfidfVectorizer
import joblib

def handle_get(event, context):
    review = event['queryStringParameters']['review']
    if event['queryStringParameters']['review'] and event['queryStringParameters']['review'].strip():
        print('This is review type: ',type(review))
        print('This is review content: ',review)
        
        rfc2 = joblib.load('/mnt/access/pac.pkl')
        tfidf_vectorizer = joblib.load('/mnt/access/tf.pkl')

        to_series=pd.Series([review])
        test=tfidf_vectorizer.transform(to_series)
        pred=list(rfc2.predict(test))
        if pred[0]=='CG':
            pred[0]='Analysis result: This content might be generated by computer'
        elif pred[0]=='OR':
            pred[0]='Analysis result: This content might be written by human'
        print(pred)
        result={'result':pred[0]}
        return {
            'statusCode': 200,
            'headers': {
                "Access-Control-Allow-Headers": "Content-Type, X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token",
                "Access-Control-Allow-Origin": "*",
                "Access-Control-Allow-Methond": "DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT",
                "Access_Control-Allow-Credentials": "true",
                "X-Requested_With": "*"
                
            },
            'body': json.dumps(result)

        }
    
    
    else:
        result={'result':'Empty input'}
        return {
        'statusCode': 200,
        'headers': {
            "Access-Control-Allow-Headers": "Content-Type, X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token",
            "Access-Control-Allow-Origin": "*",
            "Access-Control-Allow-Methond": "DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT",
            "Access_Control-Allow-Credentials": "true",
            "X-Requested_With": "*"
            
        },
        'body': json.dumps(result)
    }




def handle_put(event, context):
    
    return {
        'statusCode': 200,
        'headers': {
            "Access-Control-Allow-Headers": "Content-Type, X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token",
            "Access-Control-Allow-Origin": "*",
            "Access-Control-Allow-Methond": "DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT",
            "Access_Control-Allow-Credentials": "true",
            "X-Requested_With": "*"
        },
        'body': ''
    }


def handle_del(event, context):
     return {
        'statusCode': 200,
        'headers': {
            "Access-Control-Allow-Headers": "Content-Type, X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token",
            "Access-Control-Allow-Origin": "*",
            "Access-Control-Allow-Methond": "DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT",
            "Access_Control-Allow-Credentials": "true",
            "X-Requested_With": "*"
        },
        'body': ''
    }


def handle_post(event, context):
     return {
        'statusCode': 200,
        'headers': {
            "Access-Control-Allow-Headers": "Content-Type, X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token",
            "Access-Control-Allow-Origin": "*",
            "Access-Control-Allow-Methond": "DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT",
            "Access_Control-Allow-Credentials": "true",
            "X-Requested_With": "*"
        },
        'body': ''
    }


def lambda_handler(event, context):
    if event['httpMethod'] == 'GET':
        return handle_get(event, context)
    elif event['httpMethod'] == 'PUT':
        return handle_put(event, context)
    elif event['httpMethod'] == 'DELETE':
        return handle_del(event, context)
    elif event['httpMethod'] == 'POST':
        return handle_post(event, context)
    else:
        return {
            'statusCode': 200,
            'body': json.dumps('Hello from Lambda!')
        }

# def lambda_handler(event, context):
#     import numpy as np
#     print('np:::',np.zeros(3))
#     return{
#         'statusCode': 200,
#         'body': json.dumps('Hello from Lambda!')
#     }